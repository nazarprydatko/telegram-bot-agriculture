from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import fetch_one, fetch_all, execute_query

class EditCropStates(StatesGroup):
    waiting_for_crop_id = State()
    waiting_for_new_data = State()
    waiting_for_confirmation = State()

# –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å—ñ–≤—É
async def callback_edit_crop(callback: CallbackQuery, state: FSMContext):
    try:
        crops = fetch_all("SELECT id, name FROM crops")
        if not crops:
            await callback.message.answer("‚ùå –ü–æ—Å—ñ–≤—ñ–≤ –Ω–µ–º–∞—î –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            return

        response = "‚úèÔ∏è *–û–±–µ—Ä—ñ—Ç—å ID –ø–æ—Å—ñ–≤—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:*\n"
        for crop in crops:
            response += f"ID: {crop[0]}, –ù–∞–∑–≤–∞: {crop[1]}\n"

        await callback.message.answer(response)
        await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å ID –ø–æ—Å—ñ–≤—É:")
        await state.set_state(EditCropStates.waiting_for_crop_id)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID —ñ  –¥–∞–Ω–∏—Ö
async def process_edit_crop_id(message: Message, state: FSMContext):
    if message.text.strip() == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        from handlers.start import cmd_start
        await cmd_start(message, state)
        return

    try:
        crop_id = int(message.text.strip())
        result = fetch_one("SELECT name, area, sowing_date, maturation_days FROM crops WHERE id = %s", (crop_id,))
        if not result:
            await message.reply("‚ùå –ü–æ—Å—ñ–≤ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        await state.update_data(crop_id=crop_id)
        await message.reply(
            f"–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ:\n–ù–∞–∑–≤–∞: {result[0]}\n–ü–ª–æ—â–∞: {result[1]} –≥–∞\n–î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É: {result[2]}\n–ü—Ä–æ–≥–Ω–æ–∑: {result[3]} –¥–Ω—ñ–≤"
        )
        await message.reply(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ù–∞–∑–≤–∞, –ü–ª–æ—â–∞ (–≥–∞), –î–∞—Ç–∞ (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è (–¥–Ω—ñ–≤)."
        )
        await state.set_state(EditCropStates.waiting_for_new_data)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (ID).")

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –¥–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
async def process_edit_crop_data(message: Message, state: FSMContext):
    if message.text.strip() == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        from handlers.start import cmd_start
        await cmd_start(message, state)
        return

    try:
        data = message.text.split(",")
        if len(data) != 4:
            await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞, –ü–ª–æ—â–∞, –î–∞—Ç–∞, –ü—Ä–æ–≥–Ω–æ–∑.")
            return

        name, area_str, date_str, maturation_str = map(str.strip, data)
        area = float(area_str)
        maturation = int(maturation_str)

        if area <= 0 or maturation <= 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω–∏–º–∏.")

        await state.update_data(
            new_name=name,
            new_area=area,
            new_date=date_str,
            new_maturation=maturation
        )

        confirm_text = (
            f"üîÑ –ù–æ–≤—ñ –¥–∞–Ω—ñ:\n"
            f"–ù–∞–∑–≤–∞: {name}\n"
            f"–ü–ª–æ—â–∞: {area} –≥–∞\n"
            f"–î–∞—Ç–∞: {date_str}\n"
            f"–ü—Ä–æ–≥–Ω–æ–∑: {maturation} –¥–Ω—ñ–≤\n\n"
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è?"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="confirm_crop_edit"),
             InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_crop_edit")]
        ])
        await message.answer(confirm_text, reply_markup=keyboard)
        await state.set_state(EditCropStates.waiting_for_confirmation)

    except Exception as e:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
async def confirm_crop_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        execute_query(
            "UPDATE crops SET name=%s, area=%s, sowing_date=%s, maturation_days=%s WHERE id=%s",
            (data["new_name"], data["new_area"], data["new_date"], data["new_maturation"], data["crop_id"])
        )
        await callback.message.edit_text("‚úÖ –ü–æ—Å—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ: {e}")
    finally:
        await state.clear()

# –í—ñ–¥–º—ñ–Ω–∞
async def cancel_crop_edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()
