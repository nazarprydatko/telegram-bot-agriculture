from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import fetch_all, execute_query
from datetime import datetime
import uuid
from utils.logger_config import logger

class CropStates(StatesGroup):
    """
    States for managing crop-related user input.
    """
    waiting_for_crop_data = State()
    waiting_for_crop_confirmation = State()


async def cmd_add_crop(message: Message, state: FSMContext):
    """
    Ask the user to input crop data and set the FSM state.

    Args:
        message (Message): The Telegram message that triggered the command.
        state (FSMContext): The FSM context to manage state transitions.

    Returns:
        None
    """
    await message.reply(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Å—ñ–≤—É: –ù–∞–∑–≤–∞ –∫—É–ª—å—Ç—É—Ä–∏, –ü–ª–æ—â–∞ (–≥–∞), –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è (–¥–Ω—ñ–≤)."
    )
    await state.set_state(CropStates.waiting_for_crop_data)


async def process_crop_data(message: Message, state: FSMContext):
    if message.text.strip() == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        from handlers.start import cmd_start
        await cmd_start(message, state)
        return

    try:
        data = message.text.split(",")
        if len(data) != 4:
            error_id = str(uuid.uuid4())
            user_id = message.from_user.id
            logger.warning(
                f"[ERROR_ID={error_id}] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —É process_crop_data –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {data}",
                exc_info=True
            )
            await message.reply(
                f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å 4 –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É:\n"
                f"–ù–∞–∑–≤–∞, –ü–ª–æ—â–∞ (–≥–∞), –î–∞—Ç–∞ (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω—ñ–≤).\n–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: `{error_id}`"
            )
            return

        name, area_str, sowing_date_str, maturation_days_str = map(str.strip, data)

        try:
            area = float(area_str)
            if area <= 0:
                raise ValueError
        except ValueError:
            error_id = str(uuid.uuid4())
            user_id = message.from_user.id
            logger.warning(
                f"[ERROR_ID={error_id}] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø–ª–æ—â–∞ –≤ process_crop_data –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {area_str}",
                exc_info=True
            )
            await message.reply(
                f"‚ùå –ü–ª–æ—â–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12.5).\n–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: `{error_id}`"
            )
            return

        try:
            sowing_date = datetime.strptime(sowing_date_str, "%Y-%m-%d")
            if sowing_date.date() > datetime.now().date():
                error_id = str(uuid.uuid4())
                user_id = message.from_user.id
                logger.warning(
                    f"[ERROR_ID={error_id}] –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {sowing_date_str}",
                    exc_info=True
                )
                await message.reply(
                    f"‚ùå –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.\n–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: `{error_id}`"
                )
                return
        except ValueError:
            error_id = str(uuid.uuid4())
            user_id = message.from_user.id
            logger.warning(
                f"[ERROR_ID={error_id}] –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –¥–∞—Ç–∞ —É process_crop_data –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {sowing_date_str}",
                exc_info=True
            )
            await message.reply(
                f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD.\n–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: `{error_id}`"
            )
            return

        try:
            maturation_days = int(maturation_days_str)
            if maturation_days <= 0:
                raise ValueError
        except ValueError:
            error_id = str(uuid.uuid4())
            user_id = message.from_user.id
            logger.warning(
                f"[ERROR_ID={error_id}] –ù–µ–≤–∞–ª—ñ–¥–Ω–µ —á–∏—Å–ª–æ –¥–Ω—ñ–≤ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è –≤ process_crop_data –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {maturation_days_str}",
                exc_info=True
            )
            await message.reply(
                f"‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 90).\n–ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: `{error_id}`"
            )
            return

        await state.update_data(
            name=name,
            area=area,
            sowing_date=sowing_date_str,
            maturation_days=maturation_days
        )

        summary = (
            f"üåæ –î–∞–Ω—ñ –¥–ª—è –ø–æ—Å—ñ–≤—É:\n"
            f"–ù–∞–∑–≤–∞: {name}\n"
            f"–ü–ª–æ—â–∞: {area} –≥–∞\n"
            f"–î–∞—Ç–∞: {sowing_date_str}\n"
            f"–î–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è: {maturation_days} –¥–Ω—ñ–≤\n\n"
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="confirm_crop"),
             InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_crop")]
        ])
        await message.answer(summary, reply_markup=keyboard)
        await state.set_state(CropStates.waiting_for_crop_confirmation)

    except (ValueError, TypeError, KeyError) as e:
        error_id = str(uuid.uuid4())
        user_id = message.from_user.id
        logger.warning(
            f"[ERROR_ID={error_id}] –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤ process_crop_data –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}",
            exc_info=True
        )
        await message.reply(
            f"‚ùå –í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ. –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: `{error_id}`"
        )

    except Exception as e:
        error_id = str(uuid.uuid4())
        user_id = message.from_user.id
        logger.error(
            f"[ERROR_ID={error_id}] –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤ process_crop_data –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}",
            exc_info=True
        )
        await message.reply(
            f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞.\n–ö–æ–¥: `{error_id}`\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )


async def confirm_crop(callback: CallbackQuery, state: FSMContext):
    """
    Save the confirmed crop data to the database.

    Args:
        callback (CallbackQuery): Callback from inline button.
        state (FSMContext): FSM context with previously stored crop data.

    Returns:
        None
    """
    data = await state.get_data()
    try:
        query = """
        INSERT INTO crops (name, area, sowing_date, maturation_days)
        VALUES (%s, %s, %s, %s)
        """
        execute_query(query, (
            data["name"],
            data["area"],
            data["sowing_date"],
            data["maturation_days"]
        ))
        await callback.message.edit_text("‚úÖ –ü–æ—Å—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")

    except KeyError as ke:
        error_id = str(uuid.uuid4())
        logger.warning(
            f"[ERROR_ID={error_id}] –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á —É confirm_crop: {ke}",
            exc_info=True
        )
        await callback.message.edit_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö. –ö–æ–¥: `{error_id}`"
        )

    except Exception as e:
        error_id = str(uuid.uuid4())
        logger.error(
            f"[ERROR_ID={error_id}] –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –¥–æ –ë–î —É confirm_crop: {e}",
            exc_info=True
        )
        await callback.message.edit_text(
            f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ.\n–ö–æ–¥: `{error_id}`"
        )

    finally:
        await state.clear()


async def cancel_crop(callback: CallbackQuery, state: FSMContext):
    """
    Cancel crop creation and clear the state.

    Args:
        callback (CallbackQuery): Callback from inline button.
        state (FSMContext): FSM context to clear data.

    Returns:
        None
    """
    await callback.message.edit_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—ñ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()


async def callback_view_crops(callback: CallbackQuery):
    """
    Display a list of all crops from the database.

    Args:
        callback (CallbackQuery): Callback from user requesting crop list.

    Returns:
        None
    """
    try:
        query = "SELECT id, name, area, sowing_date FROM crops;"
        crops = fetch_all(query)

        if not crops:
            await callback.message.answer("‚ùå –ü–æ—Å—ñ–≤—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
            return

        response = "üåæ **–°–ø–∏—Å–æ–∫ –ø–æ—Å—ñ–≤—ñ–≤:**\n"
        for crop in crops:
            response += f"ID: {crop[0]}, –ù–∞–∑–≤–∞: {crop[1]}, –ü–ª–æ—â–∞: {crop[2]} –≥–∞, –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É: {crop[3]}\n"

        await callback.message.answer(response)
    except Exception as e:
        error_id = str(uuid.uuid4())
        logger.error(
            f"[ERROR_ID={error_id}] –ü–æ–º–∏–ª–∫–∞ —É callback_view_crops: {e}",
            exc_info=True
        )
        await callback.message.answer(
            f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –ø–æ—Å—ñ–≤—ñ–≤.\n–ö–æ–¥: `{error_id}`"
        )

