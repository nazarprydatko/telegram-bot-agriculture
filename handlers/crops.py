from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from database import fetch_all, execute_query


async def cmd_add_crop(message: Message, state: FSMContext):
    await message.reply(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Å—ñ–≤—É: –ù–∞–∑–≤–∞ –∫—É–ª—å—Ç—É—Ä–∏, –ü–ª–æ—â–∞ (–≥–∞), –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è (–¥–Ω—ñ–≤)."
    )
    await state.set_state("waiting_for_crop_data")

async def process_crop_data(message: Message, state: FSMContext):
    try:
        data = message.text.split(",")
        if len(data) != 4:
            raise ValueError("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å: –ù–∞–∑–≤–∞ –∫—É–ª—å—Ç—É—Ä–∏, –ü–ª–æ—â–∞, –î–∞—Ç–∞, –ü—Ä–æ–≥–Ω–æ–∑.")

        name, area, sowing_date, maturation_days = map(str.strip, data)

        area = float(area)
        maturation_days = int(maturation_days)
        from datetime import datetime
        datetime.strptime(sowing_date, "%Y-%m-%d")

        print(f"Adding crop: {name}, {area}, {sowing_date}, {maturation_days}")

        query = """
        INSERT INTO crops (name, area, sowing_date, maturation_days)
        VALUES (%s, %s, %s, %s)
        """
        execute_query(query, (name, area, sowing_date, maturation_days))
        await message.reply(f"‚úÖ –î–∞–Ω—ñ –¥–ª—è –ø–æ—Å—ñ–≤—É '{name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    except ValueError as ve:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤–≤–µ–¥–µ–Ω–Ω—è: {ve}")
    except Exception as e:
        await message.reply(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        await state.clear()

async def callback_view_crops(callback: CallbackQuery):
    try:
        query = "SELECT id, name, area, sowing_date FROM crops;"
        crops = fetch_all(query)

        if not crops:
            await callback.message.answer("‚ùå –ü–æ—Å—ñ–≤—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
            return

        response = "üåæ **–°–ø–∏—Å–æ–∫ –ø–æ—Å—ñ–≤—ñ–≤:**\n"
        for crop in crops:
            response += f"ID: {crop[0]}, –ù–∞–∑–≤–∞: {crop[1]}, –ü–ª–æ—â–∞: {crop[2]} –≥–∞, –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É: {crop[3]}\n"

        await callback.message.answer(response)
    except Exception as e:
        await callback.message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")