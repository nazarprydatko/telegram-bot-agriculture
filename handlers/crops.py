from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import fetch_all, execute_query
from datetime import datetime

class CropStates(StatesGroup):
    waiting_for_crop_data = State()
    waiting_for_crop_confirmation = State()

async def cmd_add_crop(message: Message, state: FSMContext):
    await message.reply(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Å—ñ–≤—É: –ù–∞–∑–≤–∞ –∫—É–ª—å—Ç—É—Ä–∏, –ü–ª–æ—â–∞ (–≥–∞), –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è (–¥–Ω—ñ–≤)."
    )
    await state.set_state(CropStates.waiting_for_crop_data)

async def process_crop_data(message: Message, state: FSMContext):
    if message.text.strip() == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        from handlers.start import cmd_start
        await cmd_start(message, state)
        return

    try:
        data = message.text.split(",")
        if len(data) != 4:
            await message.reply("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å 4 –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º—É:\n"
                                "–ù–∞–∑–≤–∞, –ü–ª–æ—â–∞ (–≥–∞), –î–∞—Ç–∞ (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω—ñ–≤).")
            return

        name, area_str, sowing_date_str, maturation_days_str = map(str.strip, data)

        try:
            area = float(area_str)
            if area <= 0:
                raise ValueError
        except ValueError:
            await message.reply("‚ùå –ü–ª–æ—â–∞ –º–∞—î –±—É—Ç–∏ –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12.5).")
            return

        try:
            sowing_date = datetime.strptime(sowing_date_str, "%Y-%m-%d")
            if sowing_date.date() > datetime.now().date():
                await message.reply("‚ùå –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.")
                return
        except ValueError:
            await message.reply("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ YYYY-MM-DD.")
            return

        try:
            maturation_days = int(maturation_days_str)
            if maturation_days <= 0:
                raise ValueError
        except ValueError:
            await message.reply("‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º –¥–æ–¥–∞—Ç–Ω—ñ–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 90).")
            return

        await state.update_data(
            name=name,
            area=area,
            sowing_date=sowing_date_str,
            maturation_days=maturation_days
        )

        summary = (
            f"üåæ –î–∞–Ω—ñ –¥–ª—è –ø–æ—Å—ñ–≤—É:\n"
            f"–ù–∞–∑–≤–∞: {name}\n"
            f"–ü–ª–æ—â–∞: {area} –≥–∞\n"
            f"–î–∞—Ç–∞: {sowing_date_str}\n"
            f"–î–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è: {maturation_days} –¥–Ω—ñ–≤\n\n"
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="confirm_crop"),
             InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_crop")]
        ])
        await message.answer(summary, reply_markup=keyboard)
        await state.set_state(CropStates.waiting_for_crop_confirmation)

    except Exception as e:
        await message.reply(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

async def confirm_crop(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        query = """
        INSERT INTO crops (name, area, sowing_date, maturation_days)
        VALUES (%s, %s, %s, %s)
        """
        execute_query(query, (
            data["name"],
            data["area"],
            data["sowing_date"],
            data["maturation_days"]
        ))
        await callback.message.edit_text("‚úÖ –ü–æ—Å—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {e}")
    finally:
        await state.clear()

async def cancel_crop(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—ñ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()

async def callback_view_crops(callback: CallbackQuery):
    try:
        query = "SELECT id, name, area, sowing_date FROM crops;"
        crops = fetch_all(query)

        if not crops:
            await callback.message.answer("‚ùå –ü–æ—Å—ñ–≤—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
            return

        response = "üåæ **–°–ø–∏—Å–æ–∫ –ø–æ—Å—ñ–≤—ñ–≤:**\n"
        for crop in crops:
            response += f"ID: {crop[0]}, –ù–∞–∑–≤–∞: {crop[1]}, –ü–ª–æ—â–∞: {crop[2]} –≥–∞, –î–∞—Ç–∞ –ø–æ—Å—ñ–≤—É: {crop[3]}\n"

        await callback.message.answer(response)
    except Exception as e:
        await callback.message.answer(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
