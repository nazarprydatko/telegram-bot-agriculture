from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from database import execute_query
from handlers.start import cmd_start


async def cmd_add_condition(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å: ID –ø–æ—Å—ñ–≤—É, –í–æ–ª–æ–≥—ñ—Å—Ç—å “ë—Ä—É–Ω—Ç—É (%), –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C), –û–ø–∞–¥–∏ (–º–º).")
    await state.set_state("waiting_for_condition")


async def process_condition_data(message: Message, state: FSMContext):
    if message.text.strip() == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await state.clear()
        await cmd_start(message, state)
        return

    try:
        data = message.text.split(",")
        if len(data) != 4:
            await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: ID, –í–æ–ª–æ–≥—ñ—Å—Ç—å, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –û–ø–∞–¥–∏")
            return

        crop_id, soil_moisture, temperature, precipitation = map(str.strip, data)

        crop_id = int(crop_id)
        soil_moisture = float(soil_moisture)
        temperature = float(temperature)
        precipitation = float(precipitation)

        if soil_moisture < 0 or soil_moisture > 100:
            raise ValueError("–í–æ–ª–æ–≥—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö 0-100%.")
        if precipitation < 0:
            raise ValueError("–û–ø–∞–¥–∏ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º–∏.")
        if temperature < -100 or temperature > 100:
            raise ValueError("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–∞—î –±—É—Ç–∏ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ -100¬∞C –¥–æ 100¬∞C.")

        await state.update_data(
            crop_id=crop_id,
            soil_moisture=soil_moisture,
            temperature=temperature,
            precipitation=precipitation
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="confirm_condition"),
                InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_condition")
            ]
        ])

        await message.reply(
            f"üå± –í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ:\n"
            f"ID –ø–æ—Å—ñ–≤—É: {crop_id}\n"
            f"–í–æ–ª–æ–≥—ñ—Å—Ç—å “ë—Ä—É–Ω—Ç—É: {soil_moisture}%\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"–û–ø–∞–¥–∏: {precipitation} –º–º\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?",
            reply_markup=keyboard
        )
        await state.set_state("waiting_for_condition_confirmation")

    except ValueError as ve:
        await message.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤–≤–µ–¥–µ–Ω–Ω—è: {ve}")
    except TypeError as te:
        await message.reply(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö: {te}")
    except KeyError as ke:
        await message.reply(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á —É –¥–∞–Ω–∏—Ö: {ke}")
    except Exception as e:
        await message.reply(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


async def confirm_condition(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–æ—Å—ñ–≤—É —É –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    data = await state.get_data()
    try:
        execute_query(
            "INSERT INTO crop_conditions (crop_id, soil_moisture, temperature, precipitation) VALUES (%s, %s, %s, %s)",
            (data['crop_id'], data['soil_moisture'], data['temperature'], data['precipitation'])
        )
        await callback.message.edit_text("‚úÖ –î–∞–Ω—ñ —Å—Ç–∞–Ω—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
    except KeyError as ke:
        await callback.message.edit_text(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: {ke}")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ: {e}")
    finally:
        await state.clear()


async def cancel_condition(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()
