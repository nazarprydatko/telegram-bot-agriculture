from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram import Dispatcher, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from handlers.crops import confirm_crop, cancel_crop, callback_view_crops
from handlers.harvest import confirm_harvest, cancel_harvest
from handlers.expenses import confirm_expense, cancel_expense
from handlers.conditions import confirm_condition, cancel_condition
from handlers.cmd_start_only import cmd_start
from handlers.delete import confirm_delete, cancel_delete
from handlers.reports import cmd_generate_report, cmd_export_to_excel
from handlers.profit import cmd_calculate_profit
from handlers.edit_crop import callback_edit_crop, process_edit_crop_id, process_edit_crop_data
from utils.logger_config import logger

logger.info(" –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π")

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class CropStates(StatesGroup):
    waiting_for_crop_data = State()
    edit_crop_id = State()
    edit_crop_data = State()

class DeleteStates(StatesGroup):
    waiting_for_delete_id = State()

class WeatherStates(StatesGroup):
    waiting_for_city = State()

class ConditionStates(StatesGroup):
    waiting_for_condition = State()

class HarvestStates(StatesGroup):
    waiting_for_harvest = State()

class ExpenseStates(StatesGroup):
    waiting_for_expenses = State()

# –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞–∑–∞–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä–∏
async def callback_add_crop(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ûï –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—ñ–≤—É: –ù–∞–∑–≤–∞ –∫—É–ª—å—Ç—É—Ä–∏, –ü–ª–æ—â–∞, –î–∞—Ç–∞ (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è (–¥–Ω—ñ–≤).",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(CropStates.waiting_for_crop_data)

async def callback_delete_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üóë –í–≤–µ–¥—ñ—Ç—å ID –¥–∞–Ω–∏—Ö, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(DeleteStates.waiting_for_delete_id)

async def callback_get_weather(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üå¶ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏:",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(WeatherStates.waiting_for_city)

async def callback_add_condition(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üå± –í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞–Ω –ø–æ—Å—ñ–≤—É: ID, –í–æ–ª–æ–≥—ñ—Å—Ç—å “ë—Ä—É–Ω—Ç—É, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –û–ø–∞–¥–∏.",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(ConditionStates.waiting_for_condition)

async def callback_record_harvest(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üåæ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤—Ä–æ–∂–∞—é: ID –ø–æ—Å—ñ–≤—É, –î–∞—Ç–∞, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤, –ú–∞—Å–∞.",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(HarvestStates.waiting_for_harvest)

async def callback_add_expenses(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç: ID –ø–æ—Å—ñ–≤—É, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç, –°—É–º–∞.",
        reply_markup=main_menu_keyboard
    )
    await state.set_state(ExpenseStates.waiting_for_expenses)

async def callback_calculate_profit(callback: CallbackQuery):
    print(f"Callback received: {callback.data}")
    await cmd_calculate_profit(callback.message)

async def callback_generate_report(callback: CallbackQuery):
    print(f"Callback received: {callback.data}")
    await cmd_generate_report(callback.message)

async def callback_export_to_excel(callback: CallbackQuery):
    print(f"Callback received: {callback.data}")
    await cmd_export_to_excel(callback.message)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö callback'—ñ–≤
def register_callbacks(dp: Dispatcher):
    dp.message.register(back_to_main_menu, F.text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

    dp.callback_query.register(callback_add_crop, lambda c: c.data == "add_crop")
    dp.callback_query.register(callback_view_crops, lambda c: c.data == "view_crops")
    dp.callback_query.register(callback_delete_data, lambda c: c.data == "delete_data")
    dp.callback_query.register(callback_get_weather, lambda c: c.data == "get_weather")
    dp.callback_query.register(callback_calculate_profit, lambda c: c.data == "calculate_profit")
    dp.callback_query.register(callback_generate_report, lambda c: c.data == "generate_report")
    dp.callback_query.register(callback_export_to_excel, lambda c: c.data == "export_to_excel")
    dp.callback_query.register(callback_add_condition, lambda c: c.data == "add_condition")
    dp.callback_query.register(callback_record_harvest, lambda c: c.data == "record_harvest")
    dp.callback_query.register(callback_add_expenses, lambda c: c.data == "add_expenses")
    dp.callback_query.register(callback_edit_crop, lambda c: c.data == "edit_crop")
    dp.message.register(process_edit_crop_id, CropStates.edit_crop_id)
    dp.message.register(process_edit_crop_data, CropStates.edit_crop_data)
    dp.callback_query.register(confirm_delete, lambda c: c.data == "confirm_delete")
    dp.callback_query.register(cancel_delete, lambda c: c.data == "cancel_delete")
    dp.callback_query.register(confirm_crop, lambda c: c.data == "confirm_crop")
    dp.callback_query.register(cancel_crop, lambda c: c.data == "cancel_crop")
    dp.callback_query.register(confirm_harvest, lambda c: c.data == "confirm_harvest")
    dp.callback_query.register(cancel_harvest, lambda c: c.data == "cancel_harvest")
    dp.callback_query.register(confirm_expense, lambda c: c.data == "confirm_expense")
    dp.callback_query.register(cancel_expense, lambda c: c.data == "cancel_expense")
    dp.callback_query.register(confirm_condition, lambda c: c.data == "confirm_condition")
    dp.callback_query.register(cancel_condition, lambda c: c.data == "cancel_condition")
