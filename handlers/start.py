from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from handlers.crops import callback_view_crops, process_crop_data
from handlers.delete import confirm_delete, cancel_delete, process_delete_data
from handlers.weather import process_city_weather
from handlers.conditions import process_condition_data
from handlers.harvest import process_harvest_data
from handlers.expenses import process_expense_data
from handlers.reports import cmd_generate_report, cmd_export_to_excel
from handlers.profit import cmd_calculate_profit

# States for input
class CropStates(StatesGroup):
    waiting_for_crop_data = State()

class DeleteStates(StatesGroup):
    waiting_for_delete_id = State()

class WeatherStates(StatesGroup):
    waiting_for_city = State()

class ConditionStates(StatesGroup):
    waiting_for_condition = State()

class HarvestStates(StatesGroup):
    waiting_for_harvest = State()

class ExpenseStates(StatesGroup):
    waiting_for_expenses = State()

async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Å—ñ–≤", callback_data="add_crop"),
                InlineKeyboardButton(text="üìÑ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ—Å—ñ–≤–∏", callback_data="view_crops"),
            ],
            [
                InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="delete_data"),
                InlineKeyboardButton(text="üå¶ –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É", callback_data="get_weather"),
            ],
            [
                InlineKeyboardButton(text="üìä –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å", callback_data="calculate_profit"),
                InlineKeyboardButton(text="üìú –ó–≤—ñ—Ç —É PDF", callback_data="generate_report"),
            ],
            [
                InlineKeyboardButton(text="üìÇ –ó–≤—ñ—Ç —É Excel", callback_data="export_to_excel"),
                InlineKeyboardButton(text="üå± –î–æ–¥–∞—Ç–∏ —Å—Ç–∞–Ω –ø–æ—Å—ñ–≤—É", callback_data="add_condition"),
            ],
            [
                InlineKeyboardButton(text="üåæ –ó–∞–ø–∏—Å–∞—Ç–∏ –≤—Ä–æ–∂–∞–π", callback_data="record_harvest"),
                InlineKeyboardButton(text="üí∞ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏", callback_data="add_expenses"),
            ]
        ]
    )
    await message.answer(
        "üåæ **–í—ñ—Ç–∞—î–º–æ —É Telegram-–±–æ—Ç—ñ –¥–ª—è –∞–≥—Ä–æ—Ñ—ñ—Ä–º–∏!**\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ:",
        reply_markup=keyboard
    )

async def callback_add_crop(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ûï –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å—ñ–≤—É: –ù–∞–∑–≤–∞ –∫—É–ª—å—Ç—É—Ä–∏, –ü–ª–æ—â–∞, –î–∞—Ç–∞ (YYYY-MM-DD), –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∑—Ä—ñ–≤–∞–Ω–Ω—è (–¥–Ω—ñ–≤).")
    await state.set_state(CropStates.waiting_for_crop_data)

async def callback_delete_data(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóë –í–≤–µ–¥—ñ—Ç—å ID –¥–∞–Ω–∏—Ö, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.")
    await state.set_state(DeleteStates.waiting_for_delete_id)

async def callback_get_weather(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üå¶ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏:")
    await state.set_state(WeatherStates.waiting_for_city)

async def callback_add_condition(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üå± –í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞–Ω –ø–æ—Å—ñ–≤—É: ID, –í–æ–ª–æ–≥—ñ—Å—Ç—å “ë—Ä—É–Ω—Ç—É, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –û–ø–∞–¥–∏.")
    await state.set_state(ConditionStates.waiting_for_condition)

async def callback_record_harvest(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üåæ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤—Ä–æ–∂–∞—é: ID –ø–æ—Å—ñ–≤—É, –î–∞—Ç–∞, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤, –ú–∞—Å–∞.")
    await state.set_state(HarvestStates.waiting_for_harvest)

async def callback_add_expenses(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤–∏—Ç—Ä–∞—Ç: ID –ø–æ—Å—ñ–≤—É, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç, –°—É–º–∞.")
    await state.set_state(ExpenseStates.waiting_for_expenses)

async def callback_calculate_profit(callback: CallbackQuery):
    print(f"Callback received: {callback.data}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    await cmd_calculate_profit(callback.message)

async def callback_generate_report(callback: CallbackQuery):
    print(f"Callback received: {callback.data}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    await cmd_generate_report(callback.message)

async def callback_export_to_excel(callback: CallbackQuery):
    print(f"Callback received: {callback.data}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    await cmd_export_to_excel(callback.message)

def register_callbacks(dp: Dispatcher):
    dp.callback_query.register(callback_add_crop, lambda c: c.data == "add_crop")
    dp.callback_query.register(callback_view_crops, lambda c: c.data == "view_crops")
    dp.callback_query.register(callback_delete_data, lambda c: c.data == "delete_data")
    dp.callback_query.register(callback_get_weather, lambda c: c.data == "get_weather")
    dp.callback_query.register(callback_calculate_profit, lambda c: c.data == "calculate_profit")
    dp.callback_query.register(callback_generate_report, lambda c: c.data == "generate_report")
    dp.callback_query.register(callback_export_to_excel, lambda c: c.data == "export_to_excel")
    dp.callback_query.register(callback_add_condition, lambda c: c.data == "add_condition")
    dp.callback_query.register(callback_record_harvest, lambda c: c.data == "record_harvest")
    dp.callback_query.register(callback_add_expenses, lambda c: c.data == "add_expenses")
    dp.callback_query.register(confirm_delete, lambda c: c.data == "confirm_delete")
    dp.callback_query.register(cancel_delete, lambda c: c.data == "cancel_delete")
